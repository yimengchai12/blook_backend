version: "3.8"

volumes:
  rabbitmq_data:
  pgdata: 
  kongadata:

networks:
  kong-net:
    driver: bridge

services:
 
  ###################################
  # Booking: The Booking microservice
  ###################################
  booking:
    build:
      context: ./
      dockerfile: booking.Dockerfile
    image: booking:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/booking
      PYTHONUNBUFFERED: 1
    ports:
      - "5002:5002"


    ###################################
  # Review: The Review microservice
  ###################################
  # review:
  #   build:
  #     context: ./
  #     dockerfile: review.Dockerfile
  #   image: review:latest
  #   restart: always
  #   environment:
  #     dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/review
  #     PYTHONUNBUFFERED: 1
  #   ports:
  #     - "5004:5004"



 
  #######################################################
  # Shipping Record: The Shipping Record microservice
  #######################################################
  customer:
    build:
      context: ./
      dockerfile: customer.Dockerfile
    image: customer:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/customer
      PYTHONUNBUFFERED: 1
    ports: 
      - "5003:5003"
  #######################################################
  # Paypal Record: The paypal Record microservice
  #######################################################
  payment:
    build:
      context: ./
      dockerfile: payment.Dockerfile
    image: payment:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports: 
      - "5006:5006"

  webhook:
    build:
      context: ./
      dockerfile: webhook.Dockerfile
    image: webhook:latest
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports: 
      - "5010:5010"

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
      

  ###################################
  # Error: The Error microservice
  ###################################
  error:
    build:
      context: ./
      dockerfile: error.Dockerfile
    image: error:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1

  get_booking_details:
    build:
      context: ./
      dockerfile: get_booking_details.Dockerfile
    image: get_booking_details:latest
    restart: always
    depends_on:
      # - activity
      - customer
      - activity
      - payment
      # - booking_log
      # - error
      # - rabbitmq
    environment:
      activity_URL: http://activity:5001/activity
      customer_URL: http://customer:5003/customer
      # shipping_record_URL: http://shipping_record:5002/shipping_record 
      PYTHONUNBUFFERED: 1
    ports:
      - "5012:5012"

  get_coupons:
    build:
      context: ./
      dockerfile: get_coupons.Dockerfile
    image: get_coupons:latest
    restart: always
    depends_on:
      # - activity
      - coupon
      - customer
      # - booking_log
      # - error
      # - rabbitmq
    environment:
      activity_URL: http://coupon:5013/coupon
      customer_URL: http://customer:5003/customer
      # shipping_record_URL: http://shipping_record:5002/shipping_record 
      PYTHONUNBUFFERED: 1
    ports:
      - "5014:5014"
  ##################################
  # Activity: The ACtivity microservice
  ##################################
  activity:
    build:
      context: ./
      dockerfile: activity.Dockerfile
    image: activity:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/activity
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"

  coupon:
    build:
      context: ./
      dockerfile: coupon.Dockerfile
    image: coupon:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/coupon
      PYTHONUNBUFFERED: 1
    ports:
      - "5013:5013"

  ##################################
  # Send Email: The email notification microservice
  ##################################
  send_email:
    build:
      context: ./
      dockerfile: send_email.Dockerfile
    image: send_email:latest
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports:
      - "5020:5020"


  stripe-cli:
    image: stripe/stripe-cli
    container_name: stripe-cli
    command: "listen --api-key $${STRIPE_API_KEY} --forward-to webhook:5010/webhook"
    env_file:
      - stripe_cli.env
 
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    platform: linux/amd64
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    platform: linux/amd64
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    platform: linux/amd64
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata
